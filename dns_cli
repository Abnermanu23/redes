/*Practica 2, Cliente DNS*/

#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <netinet/ip.h> /* superset of previous */
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>

int main(){
	struct sockaddr_in local,remota;
	struct timeval start, end;
	//Encabezado DNS
	unsigned char idtrans[2]={0x30,0x40};
	unsigned char contpet[2]={0x00,0x01};
	unsigned char contRRr[2]={0x00,0x00};
	unsigned char contRRa[2]={0x00,0x00};
	unsigned char contRRad[2]={0x00,0x01};
	unsigned char Enca[2];
	unsigned char Treg[2];
	unsigned char Tpet[2]={0x00,0x01};
	unsigned char Npet[100],CabeceraD[512],Resp[512];
	unsigned char c,SR,RA,Tr,Dr,Rd,pun=0x00;
	int udp_socket,lbind,salida=0,con,cont,cont2,tam,rec,opc,opc2,top,pos=0; //Declaracion de Variables
	long mtime=0, seconds, useconds;
	udp_socket = socket(AF_INET, SOCK_DGRAM, 0); //Abrir Puerto
	if (udp_socket == -1){ //Si no se puede abrir el puerto
		perror("\nError al abrir el socket");
		exit(1);
	}else{ //Si pudo abrir el puerto
		perror("\nExito al abrir el socket");
		memset(&local,0x00,sizeof(local)); //Borrar Contenido de Estructura
		local.sin_family=AF_INET; /* address family: AF_INET */
        local.sin_port=htons(0);   /* port in network byte order */
        local.sin_addr.s_addr=INADDR_ANY; /*Internet Address Aqui tecnicamente va la direccion de la computadora que envia pero no es necesario*/
        lbind=bind(udp_socket,(struct sockaddr *)&local,sizeof(local));
		if(lbind==-1){
			perror("\nError en el bind");
			exit(1);
		}else{
			perror("\nExito en el bind");
			memset(&remota,0x00,sizeof(remota)); //Borrar Contenido de Estructura
			remota.sin_family=AF_INET; /* address family: AF_INET */
			remota.sin_port=htons(8000);   /* port in network byte order */
			remota.sin_addr.s_addr=inet_addr("8.8.0.20"); /*Internet Address de la computadora que va a RECIBIR*/
			while(salida==0){
				memset(Enca,0x00,2);
				memset(CabeceraD,0x00,512);
				//Encabezado: ID de Transacciones
				memcpy(CabeceraD,idtrans,2);
				//Encabezado: Indicadores
				//Solicitud
				Enca[0]=Enca[0]&0;
				//Codigo de Operacion
				printf("Tipo de Operacion:\n(1.Solicitud, 2.Solicitud Inversa, 3.Solicitud de estado de servidor)\n");
				scanf("%d",&opc);
				if(opc==1){
					Enca[0]=Enca[0]&7;
				}else if(opc==2){
					Enca[0]=Enca[0]|8;
				}else if(opc==2){
					Enca[0]=Enca[0]|24;
				}
				//Respuesta de Autoridad en 0
				Enca[0]=Enca[0]&248;
				//Truncado en 0
				Enca[0]=Enca[0]&252;
				//Â¿Se desea Recursion? en 1 para decir que si
				Enca[0]=Enca[0]|1;
				//Recursion Disponible en 0 por ser cliente
				Enca[1]=Enca[1]&0;
				//3 bits reservados en 0
				Enca[1]=Enca[1]&15;
				//Codigo de retorno en 0 por ser cliente
				Enca[1]=Enca[1]&0;
				memcpy(CabeceraD+2,Enca,2);
				//Encabezado: Contador de peticiones
				memcpy(CabeceraD+4,contpet,2);
				//Encabezado: Contador RR de Respuestas en 0 por ser cliente
				memcpy(CabeceraD+6,contRRr,2);
				//Encabezado: Contador RR de Autoridad en 0 por ser cliente
				memcpy(CabeceraD+8,contRRa,2);
				//Encabezado: Contador RR Adicionales en 0 por ser cliente
				memcpy(CabeceraD+10,contRRad,2);
				//Pedir el nombre
				printf("\nEscriba el Nombre:\n");
				scanf("%s",Npet);
				top=strlen(Npet);
				//Preparar el nombre
				for(cont2=top+1;cont2>pos;cont2--){
					Npet[cont2]=Npet[cont2-1];
				}
				for(cont=1;cont<top+1;cont++){
					if(Npet[cont]=='.'){
						Npet[pos]=pun;
						pun=0x00;
						pos=cont;
					}else if(cont==top){
						Npet[pos]=pun+1;
					}else{
						pun++;
					}
				}
				//Copiar nombre
				memcpy(CabeceraD+12,Npet,top+1);
				//Tipo de peticion
				printf("Tipo de Peticion:\n(1.Registro Host, 2.Registro a Servidor de nombre, 3.Registro CNAME, 4.Reg. Busqueda Inversa)\n");
				scanf("%d",&opc2);
				if(opc2==1){
				 	Treg[0]=0x00;
				 	Treg[1]=0x01;
				}else if(opc2==2){
					Treg[0]=0x00;
				 	Treg[1]=0x02;
				}else if(opc2==3){
					Treg[0]=0x00;
				 	Treg[1]=0x05;
				}else if(opc2==3){
					Treg[0]=0x00;
				 	Treg[1]=0x0c;
				}
				memcpy(CabeceraD+13+top,Treg,2);
				//Clase de peticion
				memcpy(CabeceraD+15+top,Tpet,2);
				//Imprimir Encabezado
				printf("\nSolicitud DNS:\n");
				for(con=0;con<17+top;con++){
					printf("%02x ",CabeceraD[con]);
				}
				printf("\n");
				tam=sendto(udp_socket,CabeceraD,top+17,0,(struct sockaddr *)&remota,sizeof(remota)); //Manda mensaje
				salida=1;
			}
		}
	}
	printf("\nComunicacion Terminada.\n");
	close(udp_socket); //Cerrar puerto IMPORTANTE
	return 1;
}
